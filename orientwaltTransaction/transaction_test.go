package orientwaltTransaction

import (
	"encoding/hex"
	"fmt"
	"github.com/blocktree/go-owcrypt"
	"testing"
)

func Test_case1(t *testing.T) {
	denom := "satoshi"
	chainID := "mainchain"
	accountNumber := 1858
	memo := ""
	sequence := 2
	from := "htdf1rgsfxav0af8a79cmtq6rnjtjkqngl9qcj8k9l7"
	to := "htdf15qz307gtgme7xrq69ygjejfrhaumwlrlnz5ps9"
	amount := int64(100)

	gaslimit := int64(200000)
	gasPrice := int64(100)

	fee := NewStdFee(gasPrice, gaslimit)

	message := []Message{NewMessage(from, to, denom, amount, gasPrice, gaslimit)}

	tx := NewTxStruct(chainID, memo, accountNumber, sequence, &fee, message)

	emptyTrans, hash, err := tx.CreateEmptyTransactionAndHash()
	if err != nil {
		t.Error("create empty transaction failed!")
	} else {
		fmt.Println("empty transaction : ", emptyTrans)
		fmt.Println("hash : ", hash)
	}

	prikey := []byte{0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x5D, 0x57, 0x6E, 0x73, 0x57, 0xA4, 0x50, 0x1D, 0xDF, 0xE9, 0x2F, 0x46, 0x68, 0x1B, 0x20, 0xA0}

	sig, err := SignTransactionHash(hash, prikey)

	if err != nil {
		t.Error("sign transaction failed!")
	} else {
		fmt.Println("signature: ", sig)
	}

	pubkey := []byte{0x03, 0x72, 0x47, 0x8b, 0xc9, 0x3a, 0xe8, 0x27, 0xa0, 0xd5, 0x8d, 0x5b, 0x1f, 0x31, 0xd1, 0x5d, 0x9d, 0x8c, 0xf2, 0x09, 0xcb, 0x1a, 0xe2, 0x04, 0x8b, 0xae, 0x54, 0x45, 0x73, 0x18, 0x19, 0xea, 0x14}
	pubType := "tendermint/PubKeySecp256k1"
	txType := "auth/StdTx"
	msgType := "htdfservice/send"
	ret, err := tx.CreateJsonForSend(sig, pubkey, txType, msgType, pubType)
	if err != nil {
		t.Error("create json for send failed!")
	} else {
		fmt.Println("transaction for send: ", ret)
	}
}

func TestNewPub(t *testing.T) {
	pub, _ := hex.DecodeString("03c399899d167980c5842c3fb4e3d93504556e8ecaa11e426755ac0c0df769b69f")
	hash := owcrypt.Hash(pub, 0, owcrypt.HASH_ALG_HASH160)
	fmt.Println(hex.EncodeToString(hash))

	address := "htdf1s3hta89j4ykwsaad5sg2ag7twg6lfxqj5mwgup"
	check, err := Bech32Decode(address)
	fmt.Println(err)
	fmt.Println(hex.EncodeToString(check))

}

func TestNewJsonValue(t *testing.T) {
	data, _ := hex.DecodeString("7b0a20202274797065223a2022617574682f5374645478222c0a20202276616c7565223a207b0a20202020226d7367223a205b0a2020202020207b0a20202020202020202274797065223a202268746466736572766963652f73656e64222c0a20202020202020202276616c7565223a207b0a202020202020202020202246726f6d223a20226874646631306e773768756a676d6e6c306871666a3778336c763276663430766161793634686b776e706d222c0a2020202020202020202022546f223a2022687464663133726567333364646b637a64733863706b39727a677061333964393068636b387a6e6d656632222c0a2020202020202020202022416d6f756e74223a205b0a2020202020202020202020207b0a20202020202020202020202020202264656e6f6d223a20227361746f736869222c0a202020202020202020202020202022616d6f756e74223a20223130303030303030220a2020202020202020202020207d0a202020202020202020205d2c0a202020202020202020202244617461223a2022222c0a20202020202020202020224761735072696365223a2022313030222c0a202020202020202020202247617357616e746564223a20223330303030220a20202020202020207d0a2020202020207d0a202020205d2c0a2020202022666565223a207b0a202020202020226761735f77616e746564223a20223330303030222c0a202020202020226761735f7072696365223a2022313030220a202020207d2c0a20202020227369676e617475726573223a205b0a2020202020207b0a2020202020202020227075625f6b6579223a207b0a202020202020202020202274797065223a202274656e6465726d696e742f5075624b6579536563703235366b31222c0a202020202020202020202276616c7565223a2022416c465866585744766c5a66686e42374256756c7a4e41684e65626273737342744567435678324a78336b33220a20202020202020207d2c0a2020202020202020227369676e6174757265223a202274557375642b696f7853594e7438635461716b394f7879624c396d3652515845415a6e7a507544504d793067462b3671316f726878354374517870444b4b76467157724a4c57437a6e6e5843677a557a646e30306e413d3d220a2020202020207d0a202020205d2c0a20202020226d656d6f223a202253656e742076696120436f736d6f7320566f7961676572220a20207d0a7d")

	fmt.Println(string(data))
}